install.packages("e1071")
library("e1071")
data(iris)
m <-naiveBayes(Species ~., data=iris)
table(predict(m, iris), iris[,5])
View(iris)
View(iris)
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
library(readr)
bioinfo1_test_expr <- read_csv("bioinfo1.test.expr.csv")
View(bioinfo1_test_expr)
library(readr)
bioinfo1_train_expr <- read_csv("bioinfo1.train.expr.csv")
View(bioinfo1_train_expr)
library(readr)
bioinfo1_train_labels <- read_csv("bioinfo1.train.labels.csv")
View(bioinfo1_train_labels)
install.packages("e1071")
install.packages("e1071")
library("e1071")
library(readr)
test_df <- read_csv("bioinfo1.test.expr.csv")
train_labels <- read_csv("bioinfo1.train.labels.csv", col_names = c("name"))
train_df <- read_csv("bioinfo1.train.expr.csv")
View(test_df)
View(test_df)
View(train_labels)
View(train_labels)
train_labels <- read_csv("bioinfo1.train.labels.csv")
train_labels_df <- read_csv("bioinfo1.train.labels.csv")
View(train_labels)
View(train_labels)
Species
data(iris)
#algorithm = <-naiveBayes()
Species
data(iris)
#algorithm = <-naiveBayes()
Species
iris
View(iris)
View(iris)
View(train_df)
View(train_df)
View(train_labels)
View(train_labels)
algorithm = <-naiveBayes(formula=train_labels, data=train_df)
algorithm <-naiveBayes(formula=train_labels, data=train_df)
algorithm <-naiveBayes(formula=train_labels$x, data=train_df)
train_df$subtpye = train_labels$x
algorithm <-naiveBayes(subtype, data=train_df)
View(train_df)
train_labels_df <- read_csv("bioinfo1.train.labels.csv")
train_df <- read_csv("bioinfo1.train.expr.csv")
train_df$subtype = train_labels$x
algorithm <-naiveBayes(subtype, data=train_df)
library("e1071")
library(readr)
test_df <- read_csv("bioinfo1.test.expr.csv")
train_labels_df <- read_csv("bioinfo1.train.labels.csv")
View(test_df)
train_df <- read_csv("bioinfo1.train.expr.csv")
train_df$subtype = train_labels$x
train_df$subtype = train_labels_df$x
algorithm <-naiveBayes(subtype, data=train_df)
algorithm <-naiveBayes(subtype ~., data=train_df)
table(predict(algorithm, train_df), test_df)
table(predict(algorithm, test_df))
predict(algorithm, test_df)
naiveBayes(subtype ~., data=train_df)
predict(train_df)
data(iris)
iris[,5]
View(iris)
predict(algorithm,test_df)
table(predict(algorithm,test_df), train_labels_df$x)
table(predict(algorithm,test_df), train_df$subtype)
m <-naiveBayes(Species ~., data=iris)
View(iris)
model <-naiveBayes(Species ~., data=iris)
table(predict(model, iris), iris[,5])
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
test_df <- read_csv("bioinfo1.test.expr.csv")
train_labels_df <- read_csv("bioinfo1.train.labels.csv")
train_df <- read_csv("bioinfo1.train.expr.csv")
View(train_df)
View(train_labels_df)
train_df$subtype = train_labels_df$x
View(train_df)
model <-naiveBayes(subtype ~., data=train_df)
train_df <- read_csv("bioinfo1.train.expr.csv")
model <-naiveBayes(train_labels$x ~., data=train_df)
model <-naiveBayes(train_labels_df$x ~., data=train_df)
pred <- predict(model,test_df)
table(pred, train_labels_df$x)
predict(model,test_df)
train_labels_df <- read_csv("bioinfo1.train.labels.csv")
train_df <- read_csv("bioinfo1.train.expr.csv")
model <-naiveBayes(as.factor(train_labels_df$x) ~., data=train_df)
predict(model,test_df)
prediction <- predict(model,test_df)
table(prediction, train_labels_df$x)
prediction <- predict(model,train_df)
table(prediction, train_labels_df$x)
model <-naiveBayes(train_labels_df$x ~., data=train_df)
prediction <- predict(model,train_df)
table(prediction, train_labels_df$x)
model <-naiveBayes(train_labels_df$x ~., data=train_df)
predict(model,train_df)
test_df <- read_csv("bionfo1.test.expr.csv")
labels_df <- read_csv("bioinfo1.train.labels.csv")
labels_df$x <- as.factor(labels_df$x)
train_df <- read_csv("bioinfo1.train.expr.csv")
model <-naiveBayes(labels_df$x ~., data=train_df)
preciction <- predict(model,train_df)
table(prediction, labels_df$x)
model <-naiveBayes(as.factor(labels_df$x) ~., data=train_df)
preciction <- predict(model,train_df)
table(prediction, labels_df$x)
labels_df <- read_csv("bioinfo1.train.labels.csv")
train_df <- read_csv("bioinfo1.train.expr.csv")
model <-naiveBayes(as.factor(labels_df$x) ~., data=train_df)
preciction <- predict(model,train_df)
table(prediction, labels_df$x)
test_df <- read_csv("bionfo1.test.expr.csv")
labels_df <- read_csv("bioinfo1.train.labels.csv")
labels_df$x <- as.factor(labels_df$x)
train_df <- read_csv("bioinfo1.train.expr.csv")
model <-naiveBayes(labels_df$x ~., data=train_df)
prediction <- predict(model,train_df)
table(prediction, labels_df$x)
#naiveBayes(subtype ~., data=train_df)
#table(predict(algorithm,test_df), train_df$subtype)
# predict over the test
real_prediction <- predict(train_df)
#naiveBayes(subtype ~., data=train_df)
#table(predict(algorithm,test_df), train_df$subtype)
# predict over the test
real_prediction <- predict(test_df)
#naiveBayes(subtype ~., data=train_df)
#table(predict(algorithm,test_df), train_df$subtype)
# predict over the test
real_prediction <- predict(model, test_df)
show(real_prediction)
table(prediction, labels_df$x)
install.packages("randomForest)
;
;""
;"
install.packages("randomForest")
##let's try with random forests
rf_model = randomForest(labels_df$x ~., data=train_df)
library("randomForests")
library(randomForest)
##let's try with random forests
rf_model = randomForest(labels_df$x ~., data=train_df)
rf_prediction <- predict(rf_model,train_df)
table(rf_prediction, labels_df$x)
source('/media/hermetico/2TB/dev/bioinformatics/exercice-9/exercice-code.R', echo=TRUE)
# real prediction for rf model
rf_real_prediction <-predict(rf_model, test_df)
# now we can show how the naive bayes prediction for the test data performs
table(real_prediction, rf_real_prediction)
table(rf_prediction, labels_df$x)
model <-naiveBayes(labels_df$x ~., data=train_df, type="raw")
# predict over the training and compare results
prediction <- predict(model,train_df)
table(prediction, labels_df$x)
model <-naiveBayes(labels_df$x ~., data=train_df)
# predict over the training and compare results
prediction <- predict(model,train_df)
table(prediction, labels_df$x)
model <-naiveBayes(labels_df$x ~., data=train_df,threshold = 0.001)
# predict over the training and compare results
prediction <- predict(model,train_df)
table(prediction, labels_df$x)
model <-naiveBayes(labels_df$x ~., data=train_df,threshold = 0.1)
# predict over the training and compare results
prediction <- predict(model,train_df)
table(prediction, labels_df$x)
summary(model)
summary(rf_model)
## Lets try SVM
svm_model <- svm(labels_df$x ~., data=train_df)
svm_prediction <- predict(svm_model,train_df)
table(svm_prediction, labels_df$x)
## Lets try SVM
svm_model <- svm(labels_df$x ~., data=train_df)
svm_prediction <- predict(svm_model,train_df)
table(svm_prediction, labels_df$x)
summary(svm_model)
library("e1071")
## Load the datasets for training and testing
train_df <- read_csv("bioinfo1.train.expr.csv")
test_df <- read_csv("bionfo1.test.expr.csv")
library(readr)
## Load the datasets for training and testing
train_df <- read_csv("bioinfo1.train.expr.csv")
test_df <- read_csv("bionfo1.test.expr.csv")
## load the labels, and define the x columns as factors, do not really what this does, but is neede
## just googled the error and found it on stackoverflow
labels_df <- read_csv("bioinfo1.train.labels.csv")
labels_df$x <- as.factor(labels_df$x)
## Define the naiveBayes model based on the formula and the data
## the formula is just the class associated to each element of the train dataset
model <-naiveBayes(labels_df$x ~., data=train_df)
## Now we can predict over the same dataset, in order to measure the accuracy of our model
prediction <- predict(model,train_df)
## Ouptuts the confussion matrix for the prediction
table(prediction, labels_df$x)
prediction[1]
prediction!=labels_df$x
sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction)
print("Accuracy of naive bayes", sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction) * 100)
print(c("Accuracy of naive bayes", sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction) * 100)
print(c("Accuracy of naive bayes", sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction) * 100)
print(c("Accuracy of naive bayes", sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction) * 100))
cat("Accuracy of naive bayes", sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction) * 100)
cat("Accuracy of naive bayes", sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction) * 100, "%")
## Let's predict over the test dataset
real_prediction <- predict(model, test_df)
test_df <- read_csv("bionfo1.test.expr.csv")
test_df <- read_csv("bioinfo1.test.expr.csv")
## Let's predict over the test dataset
real_prediction <- predict(model, test_df)
show(real_prediction)
write.csv(real_prediciton, file = "output.csv")
write.csv(data.frame("predictions"= real_predictions), file = "output.csv")
write.csv(real_prediction, file = "output.csv")
write.csv(real_prediction, file = "output.csv",row.names=FALSE)
View(train_df)
View(train_df)
View(test_df)
View(labels_df)
library("e1071")
library(readr)
## Load the datasets for training and testing
train_df <- read_csv("bioinfo1.train.expr.csv")
test_df <- read_csv("bioinfo1.test.expr.csv")
## load the labels, and define the x columns as factors, do not really what this does, but is neede
## just googled the error and found it on stackoverflow
labels_df <- read_csv("bioinfo1.train.labels.csv")
labels_df$x <- as.factor(labels_df$x)
## Define the naiveBayes model based on the formula and the data
## the formula is just the class associated to each element of the train dataset
model <-naiveBayes(labels_df$x ~., data=train_df)
## Now we can predict over the same dataset, in order to measure the accuracy of our model
prediction <- predict(model,train_df)
## Ouptuts the confussion matrix for the prediction
table(prediction, labels_df$x)
cat("Accuracy of naive bayes", sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction) * 100, "%")
## Let's predict over the test dataset
real_prediction <- predict(model, test_df)
show(real_prediction)
summary(prediction)
## Ouptuts the confussion matrix for the prediction
table(prediction, labels_df$x)
cat("Accuracy of naive bayes", sum(prediction!=labels_df$x, na.rm=TRUE) / length(prediction) * 100, "%")
library(randomForest)
##let's try with random forests
rf_model = randomForest(labels_df$x ~., data=train_df)
rf_prediction <- predict(rf_model,train_df)
table(rf_prediction, labels_df$x)
#summary(rf_model)
# real prediction for rf model, and let's assume it is also 100% of accuracy
rf_real_prediction <-predict(rf_model, test_df)
# now we can show how the naive bayes prediction for the test data performs
table(real_prediction, rf_real_prediction)
cat("Accuracy of naive bayes", sum(prediction!=rf_prediction, na.rm=TRUE) / length(prediction) * 100, "%")
